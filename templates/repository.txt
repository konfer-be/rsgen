import { Repository, EntityRepository, getRepository } from 'typeorm';
import { omitBy, isNil } from 'lodash';

import { {{ENTITY_CAPITALIZE}} } from '{{SHORTCUT_MODEL}}';

@EntityRepository({{ENTITY_CAPITALIZE}})
export class {{ENTITY_CAPITALIZE}}Repository extends Repository<{{ENTITY_CAPITALIZE}}>  {

  constructor() {
    super();
  }

  /**
   * @description Get one {{ENTITY_LOWERCASE}}
   *
   * @param id - The id of {{ENTITY_LOWERCASE}}
   *
   */
  async one(id: number): Promise<User> {

    const repository = getRepository({{ENTITY_CAPITALIZE}});
    const options: { id: number } = omitBy({ id }, isNil) as { id: number };

    const {{ENTITY_LOWERCASE}} = await repository.findOne({
      where: options
    });

    if (!{{ENTITY_LOWERCASE}}) {
      throw notFound('{{ENTITY_CAPITALIZE}} not found');
    }

    return {{ENTITY_LOWERCASE}};
  }

  /**
   * Get a list of {{ENTITY_LOWERCASE}}s according to current query parameters
   *
   * @public
   */
  async list({ page = 1, perPage = 30 }: { page: number, perPage: number }): Promise<{{ENTITY_CAPITALIZE}}[]> {

    const repository = getRepository({{ENTITY_CAPITALIZE}});
    const options = {}; /** @todo omitBy({}, isNil) **/

    const {{ENTITY_PLURALIZE}} = await repository.find({
      where: options,
      skip: ( page - 1 ) * perPage,
      take: perPage
    });

    return {{ENTITY_PLURALIZE}};
  }

}
