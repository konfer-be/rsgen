import { getRepository } from 'typeorm';
import { {{ENTITY_CAPITALIZE}}Controller } from '@resources/{{ENTITY_LOWERCASE}}/{{ENTITY_LOWERCASE}}.controller';
import { Router } from '@classes/router.class';
import { Guard } from '@middlewares/guard.middleware';
import { Validator } from '@middlewares/validator.middleware';
import { ROLE } from '@enums';
import { list{{ENTITY_PLURALIZE_UP}}, insert{{ENTITY_CAPITALIZE}}, get{{ENTITY_CAPITALIZE}}, replace{{ENTITY_CAPITALIZE}}, update{{ENTITY_CAPITALIZE}}, remove{{ENTITY_CAPITALIZE}} } from '@resources/{{ENTITY_LOWERCASE}}/{{ENTITY_LOWERCASE}}.validation';

export class {{ENTITY_CAPITALIZE}}Router extends Router {

  constructor(){
    super();
  }

  /**
   * @description Plug routes definitions
   */
  define(): void {

    this.router.route('/')

      /**
       * @api {get} api/v1/{{ENTITY_PLURALIZE}} List {{ENTITY_PLURALIZE}}
       * @apiDescription Get a list of {{ENTITY_PLURALIZE}}
       * @apiVersion 1.0.0
       * @apiName List{{ENTITY_CAPITALIZE}}
       * @apiGroup {{ENTITY_CAPITALIZE}}
       * @apiPermission ROLE.admin
       *
       * @apiUse BaseHeader
       *
       * @apiParam  {Number{1-}}         [page=1]     List page
       * @apiParam  {Number{1-100}}      [perPage=1]  {{ENTITY_CAPITALIZE}}'s per page
       *
       * TODO:
       */
      .get(Guard.authorize([ROLE.admin, ROLE.user]), Validator.check(list{{ENTITY_PLURALIZE_UP}}), {{ENTITY_CAPITALIZE}}Controller.list)

      /**
       * @api {post} api/v1/{{ENTITY_PLURALIZE}} Create {{ENTITY_LOWERCASE}}(s)
       * @apiDescription Create one or many new {{ENTITY_LOWERCASE}}(s)
       * @apiVersion 1.0.0
       * @apiName Create{{ENTITY_CAPITALIZE}}
       * @apiGroup {{ENTITY_CAPITALIZE}}
       * @apiPermission user
       *
       * @apiUse BaseHeader
       *
       * TODO:
       */
      .post(Guard.authorize([ROLE.admin, ROLE.user]), Validator.check(insert{{ENTITY_CAPITALIZE}}), {{ENTITY_CAPITALIZE}}Controller.create);

    this.router.route('/:{{ENTITY_LOWERCASE}}Id')

      /**
       * @api {get} api/v1/{{ENTITY_PLURALIZE}}/:id Get one {{ENTITY_LOWERCASE}}
       * @apiDescription Get {{ENTITY_LOWERCASE}}
       * @apiVersion 1.0.0
       * @apiName Get{{ENTITY_CAPITALIZE}}
       * @apiGroup {{ENTITY_CAPITALIZE}}
       * @apiPermission user
       *
       * @apiUse BaseHeader
       *
       * TODO:
       */
      .get(Guard.authorize([ROLE.admin, ROLE.user]), Validator.check(get{{ENTITY_CAPITALIZE}}), {{ENTITY_CAPITALIZE}}Controller.get)

      /**
       * @api {put} api/v1/{{ENTITY_PLURALIZE}}/:id Replace {{ENTITY_LOWERCASE}}
       * @apiDescription Replace the whole {{ENTITY_LOWERCASE}} with a new one
       * @apiVersion 1.0.0
       * @apiName Replace{{ENTITY_CAPITALIZE}}
       * @apiGroup {{ENTITY_CAPITALIZE}}
       * @apiPermission user
       *
       * @apiUse BaseHeader
       *
       * TODO:
       */
      .put(Guard.authorize([ROLE.admin, ROLE.user]), Validator.check(replace{{ENTITY_CAPITALIZE}}), {{ENTITY_CAPITALIZE}}Controller.update)

      /**
       * @api {patch} api/v1/{{ENTITY_PLURALIZE}}/:id Update {{ENTITY_LOWERCASE}}
       * @apiDescription Update some fields of a {{ENTITY_LOWERCASE}}
       * @apiVersion 1.0.0
       * @apiName Update{{ENTITY_CAPITALIZE}}
       * @apiGroup {{ENTITY_CAPITALIZE}}
       * @apiPermission user
       *
       * @apiUse BaseHeader
       *
       * TODO:
       */
      .patch(Guard.authorize([ROLE.admin, ROLE.user]), Validator.check(update{{ENTITY_CAPITALIZE}}), {{ENTITY_CAPITALIZE}}Controller.update)

      /**
       * @api {patch} api/v1/{{ENTITY_PLURALIZE}}/:id Delete {{ENTITY_LOWERCASE}}
       * @apiDescription Delete a {{ENTITY_LOWERCASE}}
       * @apiVersion 1.0.0
       * @apiName Delete{{ENTITY_CAPITALIZE}}
       * @apiGroup {{ENTITY_CAPITALIZE}}
       * @apiPermission user
       *
       * @apiUse BaseHeader
       *
       * @apiError (Bad request 400)   ValidationError    Some parameters may contain invalid values
       * @apiError (Unauthorized 401)  Unauthorized       Only authenticated users can access the data
       * @apiError (Forbidden 403)     Forbidden          Only ROLE.admins can access the data
       * @apiError (Not Found 404)     NotFound           {{ENTITY_CAPITALIZE}} does not exist
       * 
       * TODO:
       */
      .delete(Guard.authorize([ROLE.admin, ROLE.user]), Validator.check(remove{{ENTITY_CAPITALIZE}}), {{ENTITY_CAPITALIZE}}Controller.remove);

  }
}